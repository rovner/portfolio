plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'io.freefair.lombok' version '6.4.1'
    id 'jacoco'
    id 'com.github.spotbugs' version '5.0.6'
    id 'io.qameta.allure' version '2.9.6'
}

group 'io.rovner'
version '1.0-SNAPSHOT'

ext {
    junitVersion = '5.8.2'
    allureVersion = '2.17.3'
    testContainersVersion = '1.16.3'
    retrofitVersion = '2.9.0'
}

repositories {
    mavenCentral()
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
    jacocoJars
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.postgresql:postgresql:42.3.3')

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    integrationTestImplementation "io.qameta.allure:allure-junit5:${allureVersion}"
    integrationTestImplementation "io.qameta.allure:allure-okhttp3:${allureVersion}"
    integrationTestImplementation "io.qameta.allure:allure-assertj:${allureVersion}"
    integrationTestImplementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
    integrationTestImplementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
    integrationTestImplementation 'org.assertj:assertj-core:3.22.0'
    integrationTestImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    integrationTestImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    integrationTestImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
    integrationTestImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
    integrationTestImplementation 'commons-io:commons-io:2.11.0'
    integrationTestImplementation 'org.postgresql:postgresql:42.3.3'
    integrationTestImplementation 'org.springframework.data:spring-data-jpa:2.6.3'
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"

    jacocoJars('org.jacoco:jacoco:0.8.7@zip')
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                minimum = 0.9
            }
            limit {
                counter = 'BRANCH'
                minimum = 0.9
            }
        }
    }
}

task jacocoJarsUnzip(type: Copy) {
    from zipTree(configurations.jacocoJars.singleFile).matching {
        include 'lib/jacocoagent.jar', 'lib/jacococli.jar'
    }
    into "$buildDir/jacoco-jars"
}

tasks.register('jacocoIntegrationTestReport', JacocoReport) {
    //noinspection GroovyAssignabilityCheck
    sourceSets sourceSets.main
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/integrationTest-*.exec")
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/reports/jacoco/integrationTest/")
    }
}

build.finalizedBy jacocoTestCoverageVerification

spotbugsMain {
    //noinspection GroovyAssignabilityCheck
    reports {
        html {
            //noinspection GroovyAssignabilityCheck
            required = true
            //noinspection GroovyAssignabilityCheck
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

spotbugsTest {
    //noinspection GroovyAssignabilityCheck
    reports {
        html {
            //noinspection GroovyAssignabilityCheck
            required = true
            //noinspection GroovyAssignabilityCheck
            outputLocation = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

afterEvaluate {
    spotbugsIntegrationTest {
        //noinspection GroovyAssignabilityCheck
        reports {
            html {
                //noinspection GroovyAssignabilityCheck
                required = true
                //noinspection GroovyAssignabilityCheck
                outputLocation = file("$buildDir/reports/spotbugs/integrationTest/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        }
    }
}

bootJar {
    archiveFileName = "backend-app.jar"
}

bootRun {
    jvmArgs = [
            "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005",
            "-Djava.security.egd=file:/dev/./urandom",
            "-Xmx1G",
            "-XX:ActiveProcessorCount=1",
            "-XX:+UseContainerSupport",
            "-XX:+AlwaysActAsServerClassMachine"
    ]
}

sourceSets {
    integrationTest {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

tasks.register('docker', Exec) {
    description = 'Build docker image.'
    group = 'build'
    commandLine 'docker', 'build', '-t', 'backend', '--target', 'prod', '.'
}

tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    //noinspection GrUnresolvedAccess
    shouldRunAfter test
    //noinspection GrUnresolvedAccess
    useJUnitPlatform()
    systemProperties += [
            "junit.jupiter.execution.parallel.enabled"                 : "true",
            "junit.jupiter.execution.parallel.mode.default"            : "concurrent",
            "junit.jupiter.execution.parallel.mode.classes.default"    : "concurrent",
            "junit.jupiter.execution.parallel.config.strategy"         : "fixed",
            "junit.jupiter.execution.parallel.config.fixed.parallelism": "3"
    ]
    //noinspection GrUnresolvedAccess
    dependsOn tasks.docker, tasks.jacocoJarsUnzip
    //noinspection GrUnresolvedAccess
    finalizedBy tasks.allureReport, tasks.jacocoIntegrationTestReport
}

allure {
    version = allureVersion
}

tasks.allureReport.doFirst {
    file("${buildDir}/reports/allure-report").deleteDir()
}